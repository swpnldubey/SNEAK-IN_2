{"ast":null,"code":"import React,{useState}from'react';import{GoogleOAuthProvider,GoogleLogin}from'@react-oauth/google';import{useNavigate}from'react-router-dom';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsx(GoogleOAuthProvider,{clientId:process.env.REACT_APP_GOOGLE_CLIENT_ID,children:/*#__PURE__*/_jsx(Login,{})})});}const Login=()=>{const[isLoggedIn,setIsLoggedIn]=useState(false);const navigate=useNavigate();const handleSuccessfulLogin=response=>{console.log('User is successfully logged in:',response);// Assuming the server response includes a 'userIsRegistered' field\nconst userIsRegistered=response.userIsRegistered;// Check if the user is registered and redirect accordingly\nif(userIsRegistered){navigate('/platform');}else{navigate('/register');}};// const handleSuccessfulLogin = async (response) => {\n//   console.log('User is successfully logged in:', response);\n//   try {\n//     const serverResponse = await axios.post('http://localhost:5000/auth/google', { tokenId: response.tokenId });\n//     if (serverResponse.data.success) {\n//       const { name, college, className } = serverResponse.data.user;\n//       if (serverResponse.data.isUserRegistered) {\n//         navigate('/platform');\n//       } else {\n//         navigate('/register');\n//       }\n//     } else {\n//       console.error('Server response error:', serverResponse.data.message);\n//     }\n//   } catch (error) {\n//     console.error('Axios error:', error);\n//   }\n// };\nconst onLoginSuccess=response=>{handleSuccessfulLogin(response);setIsLoggedIn(true);};const onLoginFailure=error=>{console.error('Google login failed:',error.message);// Display an error message to the user\nalert('Google login failed. Please try again.');};return/*#__PURE__*/_jsx(\"div\",{class:\"flex min-h-screen\",children:/*#__PURE__*/_jsx(\"div\",{class:\"max-w-md mx-auto space-y-3\",children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h1\",{id:\"login\",children:[\" \",/*#__PURE__*/_jsx(\"a\",{href:\"/\",children:\" SNEAK IN \"}),\" \"]}),/*#__PURE__*/_jsxs(\"div\",{class:\"register\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Register/Log-In to SNEAK IN\"}),/*#__PURE__*/_jsx(\"p\",{id:\"experience\",children:\"& experience college like never before.\"}),/*#__PURE__*/_jsx(GoogleLogin,{scope:\"openid profile email\",onSuccess:onLoginSuccess,onFailure:onLoginFailure,children:/*#__PURE__*/_jsx(\"button\",{id:\"login-button\",children:\"Sign-in with Google\"})})]})]})})});};export default App;","map":{"version":3,"names":["React","useState","GoogleOAuthProvider","GoogleLogin","useNavigate","axios","jsx","_jsx","jsxs","_jsxs","App","className","children","clientId","process","env","REACT_APP_GOOGLE_CLIENT_ID","Login","isLoggedIn","setIsLoggedIn","navigate","handleSuccessfulLogin","response","console","log","userIsRegistered","onLoginSuccess","onLoginFailure","error","message","alert","class","id","href","scope","onSuccess","onFailure"],"sources":["C:/Users/swapn/OneDrive/Desktop/SNEAK IN_2/client/src/pages/Login.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <GoogleOAuthProvider clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}>\r\n        <Login />\r\n      </GoogleOAuthProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Login = () => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSuccessfulLogin = (response) => {\r\n    console.log('User is successfully logged in:', response);\r\n  \r\n    // Assuming the server response includes a 'userIsRegistered' field\r\n    const userIsRegistered = response.userIsRegistered;\r\n  \r\n    // Check if the user is registered and redirect accordingly\r\n    if (userIsRegistered) {\r\n      navigate('/platform');\r\n    } else {\r\n      navigate('/register');\r\n    }\r\n  };\r\n\r\n  // const handleSuccessfulLogin = async (response) => {\r\n  //   console.log('User is successfully logged in:', response);\r\n\r\n  //   try {\r\n  //     const serverResponse = await axios.post('http://localhost:5000/auth/google', { tokenId: response.tokenId });\r\n\r\n  //     if (serverResponse.data.success) {\r\n  //       const { name, college, className } = serverResponse.data.user;\r\n\r\n  //       if (serverResponse.data.isUserRegistered) {\r\n  //         navigate('/platform');\r\n  //       } else {\r\n  //         navigate('/register');\r\n  //       }\r\n  //     } else {\r\n  //       console.error('Server response error:', serverResponse.data.message);\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.error('Axios error:', error);\r\n  //   }\r\n  // };\r\n\r\n  const onLoginSuccess = (response) => {\r\n    handleSuccessfulLogin(response);\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  const onLoginFailure = (error) => {\r\n    console.error('Google login failed:', error.message);\r\n    // Display an error message to the user\r\n    alert('Google login failed. Please try again.');\r\n  };\r\n\r\n  return (\r\n    <div class='flex min-h-screen'>\r\n      <div class='max-w-md mx-auto space-y-3'>\r\n        <div>\r\n          <h1 id='login'> <a href=\"/\"> SNEAK IN </a> </h1>\r\n          <div class=\"register\">\r\n            <h3>\r\n              Register/Log-In to SNEAK IN\r\n            </h3>\r\n            <p id=\"experience\">& experience college like never before.</p>\r\n\r\n            <GoogleLogin \r\n            scope=\"openid profile email\"\r\n            onSuccess={onLoginSuccess}\r\n            onFailure={onLoginFailure}\r\n          >\r\n              \r\n            \r\n            <button id='login-button'>Sign-in with Google</button>\r\n            </GoogleLogin>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,mBAAmB,CAAEC,WAAW,KAAQ,qBAAqB,CACtE,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAE1B,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,mBACEH,IAAA,QAAKI,SAAS,CAAC,KAAK,CAAAC,QAAA,cAClBL,IAAA,CAACL,mBAAmB,EAACW,QAAQ,CAAEC,OAAO,CAACC,GAAG,CAACC,0BAA2B,CAAAJ,QAAA,cACpEL,IAAA,CAACU,KAAK,GAAE,CAAC,CACU,CAAC,CACnB,CAAC,CAEV,CAEA,KAAM,CAAAA,KAAK,CAAGA,CAAA,GAAM,CAClB,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGlB,QAAQ,CAAC,KAAK,CAAC,CACnD,KAAM,CAAAmB,QAAQ,CAAGhB,WAAW,CAAC,CAAC,CAE9B,KAAM,CAAAiB,qBAAqB,CAAIC,QAAQ,EAAK,CAC1CC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAEF,QAAQ,CAAC,CAExD;AACA,KAAM,CAAAG,gBAAgB,CAAGH,QAAQ,CAACG,gBAAgB,CAElD;AACA,GAAIA,gBAAgB,CAAE,CACpBL,QAAQ,CAAC,WAAW,CAAC,CACvB,CAAC,IAAM,CACLA,QAAQ,CAAC,WAAW,CAAC,CACvB,CACF,CAAC,CAED;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,KAAM,CAAAM,cAAc,CAAIJ,QAAQ,EAAK,CACnCD,qBAAqB,CAACC,QAAQ,CAAC,CAC/BH,aAAa,CAAC,IAAI,CAAC,CACrB,CAAC,CAED,KAAM,CAAAQ,cAAc,CAAIC,KAAK,EAAK,CAChCL,OAAO,CAACK,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAACC,OAAO,CAAC,CACpD;AACAC,KAAK,CAAC,wCAAwC,CAAC,CACjD,CAAC,CAED,mBACEvB,IAAA,QAAKwB,KAAK,CAAC,mBAAmB,CAAAnB,QAAA,cAC5BL,IAAA,QAAKwB,KAAK,CAAC,4BAA4B,CAAAnB,QAAA,cACrCH,KAAA,QAAAG,QAAA,eACEH,KAAA,OAAIuB,EAAE,CAAC,OAAO,CAAApB,QAAA,EAAC,GAAC,cAAAL,IAAA,MAAG0B,IAAI,CAAC,GAAG,CAAArB,QAAA,CAAC,YAAU,CAAG,CAAC,IAAC,EAAI,CAAC,cAChDH,KAAA,QAAKsB,KAAK,CAAC,UAAU,CAAAnB,QAAA,eACnBL,IAAA,OAAAK,QAAA,CAAI,6BAEJ,CAAI,CAAC,cACLL,IAAA,MAAGyB,EAAE,CAAC,YAAY,CAAApB,QAAA,CAAC,yCAAuC,CAAG,CAAC,cAE9DL,IAAA,CAACJ,WAAW,EACZ+B,KAAK,CAAC,sBAAsB,CAC5BC,SAAS,CAAET,cAAe,CAC1BU,SAAS,CAAET,cAAe,CAAAf,QAAA,cAI1BL,IAAA,WAAQyB,EAAE,CAAC,cAAc,CAAApB,QAAA,CAAC,qBAAmB,CAAQ,CAAC,CACzC,CAAC,EAEX,CAAC,EACH,CAAC,CACH,CAAC,CACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAF,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}